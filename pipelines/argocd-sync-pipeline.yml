trigger:
  branches:
    include:
      - main
  paths:
    include:
      - k8s/*

pr:
  branches:
    include:
      - main
  paths:
    include:
      - k8s/*

parameters:
  - name: applicationName
    displayName: 'ArgoCD Application to Sync'
    type: string
    default: 'all'
    values:
      - all
      - ecommerce-microservices
      - ecommerce-database
      - ecommerce-monitoring
  
  - name: aksClusterName
    displayName: 'AKS Cluster Name'
    type: string
    default: 'aks-cluster-dev'
  
  - name: resourceGroupName
    displayName: 'Resource Group Name'
    type: string
    default: 'rg-aks-dev'

variables:
  - name: kubectlVersion
    value: 'v1.28.0'
  - group: azure-credentials

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: ValidateK8s
    displayName: 'Validate Kubernetes Changes'
    jobs:
      - job: ValidateManifests
        displayName: 'Validate K8s Manifests'
        steps:
          - checkout: self

          - task: KubectlInstaller@0
            displayName: 'Install kubectl'
            inputs:
              kubectlVersion: $(kubectlVersion)

          - task: Bash@3
            displayName: 'Validate K8s Manifests'
            inputs:
              targetType: 'inline'
              script: |
                echo "🔍 Validating Kubernetes manifests for ArgoCD compatibility..."
                find k8s/ -name "*.yaml" -o -name "*.yml" | while read file; do
                  echo "  ✓ Validating $file"
                  kubectl apply --dry-run=client -f "$file" || exit 1
                done
                echo "✅ All manifests are valid for ArgoCD deployment"

          - task: Bash@3
            displayName: 'Check ArgoCD Compatibility'
            inputs:
              targetType: 'inline'
              script: |
                echo "📋 Checking ArgoCD compatibility..."
                
                # Check for conflicting resources
                echo "Checking for namespace definitions:"
                find k8s/ -name "*.yaml" -exec grep -l "kind: Namespace" {} \; || echo "No namespace definitions found"
                
                echo ""
                echo "Checking for resource naming conflicts:"
                find k8s/ -name "*.yaml" -exec grep -H "name:" {} \; | head -10
                
                echo ""
                echo "✅ Manifests are compatible with ArgoCD GitOps workflow"

  - stage: TriggerArgoCDSync
    displayName: 'Trigger ArgoCD Synchronization'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    dependsOn: ValidateK8s
    jobs:
      - deployment: SyncArgoCD
        displayName: 'Sync ArgoCD Applications'
        environment: argocd-sync
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: AzureCLI@2
                  displayName: 'Connect to AKS and Check ArgoCD'
                  inputs:
                    azureSubscription: 'azure-service-connection'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      CLUSTER_NAME="${{ parameters.aksClusterName }}"
                      RG_NAME="${{ parameters.resourceGroupName }}"
                      
                      echo "🔗 Connecting to AKS cluster: $CLUSTER_NAME in resource group: $RG_NAME"
                      az aks get-credentials --resource-group "$RG_NAME" --name "$CLUSTER_NAME" --overwrite-existing
                      
                      echo "✅ Connected to cluster"
                      kubectl cluster-info
                      
                      echo "📊 Checking ArgoCD installation status..."
                      
                      if kubectl get namespace argocd 2>/dev/null; then
                        echo "✅ ArgoCD namespace found"
                        
                        # Check if ArgoCD is running
                        if kubectl get pods -n argocd | grep -q "Running"; then
                          echo "✅ ArgoCD is running"
                          
                          # List applications
                          echo ""
                          echo "ArgoCD Applications:"
                          kubectl get applications -n argocd || echo "No applications found"
                        else
                          echo "⚠️ ArgoCD pods are not in Running state"
                          kubectl get pods -n argocd
                          exit 1
                        fi
                      else
                        echo "❌ ArgoCD is not installed. Please run the ArgoCD installation pipeline first."
                        exit 1
                      fi

                - task: Bash@3
                  displayName: 'Trigger Application Sync'
                  inputs:
                    targetType: 'inline'
                    script: |
                      APPLICATION="${{ parameters.applicationName }}"
                      
                      if [ "$APPLICATION" = "all" ]; then
                        echo "🔄 Triggering sync for all ArgoCD applications..."
                        
                        APPLICATIONS=("ecommerce-microservices" "ecommerce-database" "ecommerce-monitoring")
                        
                        for app in "${APPLICATIONS[@]}"; do
                          echo "  Syncing application: $app"
                          if kubectl get application "$app" -n argocd 2>/dev/null; then
                            kubectl patch application "$app" -n argocd -p '{"operation":{"initiatedBy":{"username":"azure-devops"},"sync":{"revision":"HEAD"}}}' --type merge || true
                            echo "  ✅ Sync triggered for $app"
                          else
                            echo "  ⚠️ Application $app not found"
                          fi
                        done
                      else
                        echo "🔄 Triggering sync for application: $APPLICATION"
                        
                        if kubectl get application "$APPLICATION" -n argocd 2>/dev/null; then
                          kubectl patch application "$APPLICATION" -n argocd -p '{"operation":{"initiatedBy":{"username":"azure-devops"},"sync":{"revision":"HEAD"}}}' --type merge || true
                          echo "✅ Sync triggered for $APPLICATION"
                        else
                          echo "❌ Application $APPLICATION not found"
                          exit 1
                        fi
                      fi

                - task: Bash@3
                  displayName: 'Monitor Sync Status'
                  inputs:
                    targetType: 'inline'
                    script: |
                      echo "👀 Monitoring ArgoCD sync status..."
                      
                      # Wait for sync to start and complete
                      timeout=300
                      while [ $timeout -gt 0 ]; do
                        echo ""
                        echo "Application Status ($(date)):"
                        kubectl get applications -n argocd -o custom-columns="NAME:.metadata.name,SYNC:.status.sync.status,HEALTH:.status.health.status,REVISION:.status.sync.revision" || true
                        
                        # Check if any application is still syncing
                        SYNCING=$(kubectl get applications -n argocd -o jsonpath='{.items[*].status.sync.status}' 2>/dev/null | grep -c "Syncing" || echo "0")
                        
                        if [ "$SYNCING" -eq 0 ]; then
                          echo ""
                          echo "✅ All applications have completed synchronization"
                          break
                        fi
                        
                        echo "  Waiting for sync completion... ($timeout seconds remaining)"
                        sleep 10
                        timeout=$((timeout-10))
                      done
                      
                      if [ $timeout -le 0 ]; then
                        echo "⚠️ Sync monitoring timed out"
                      fi

                - task: Bash@3
                  displayName: 'Final Status Report'
                  inputs:
                    targetType: 'inline'
                    script: |
                      echo ""
                      echo "📊 Final ArgoCD Status Report:"
                      echo "============================="
                      
                      # Detailed application status
                      kubectl get applications -n argocd -o wide || echo "No applications found"
                      
                      echo ""
                      echo "Application Health Details:"
                      for app in ecommerce-microservices ecommerce-database ecommerce-monitoring; do
                        if kubectl get application "$app" -n argocd 2>/dev/null; then
                          echo ""
                          echo "Application: $app"
                          kubectl get application "$app" -n argocd -o jsonpath='  Sync Status: {.status.sync.status}{"\n"}  Health Status: {.status.health.status}{"\n"}  Revision: {.status.sync.revision}{"\n"}'
                        fi
                      done
                      
                      echo ""
                      echo "🔗 ArgoCD UI Access:"
                      ARGOCD_IP=$(kubectl get svc argocd-server-loadbalancer -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "Pending")
                      if [ "$ARGOCD_IP" != "Pending" ]; then
                        echo "   https://$ARGOCD_IP"
                      else
                        echo "   LoadBalancer IP pending - check: kubectl get svc argocd-server-loadbalancer -n argocd"
                      fi

                - task: Bash@3
                  displayName: 'GitOps Workflow Status'
                  inputs:
                    targetType: 'inline'
                    script: |
                      echo ""
                      echo "🎉 GitOps Workflow Status:"
                      echo "========================="
                      echo ""
                      echo "✅ Kubernetes manifests validated"
                      echo "✅ ArgoCD synchronization triggered"
                      echo "✅ Applications deployment monitored"
                      echo ""
                      echo "🔄 GitOps Process:"
                      echo "   1. Code changes detected in k8s/ directory"
                      echo "   2. Manifests validated for ArgoCD compatibility"
                      echo "   3. ArgoCD applications synchronized with Git"
                      echo "   4. Deployment status monitored and reported"
                      echo ""
                      echo "📝 GitOps Benefits Active:"
                      echo "   • Declarative deployments"
                      echo "   • Git as single source of truth"
                      echo "   • Automated drift detection and correction"
                      echo "   • Audit trail of all changes"
                      echo "   • Rollback capabilities"
                      echo ""
                      echo "🚀 Your GitOps workflow is operational!"