# Azure DevOps Pipeline for AKS Infrastructure Deployment
# This pipeline deploys Terraform infrastructure to Azure

trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - terraform/*

variables:
- group: terraform-backend
- name: terraformVersion
  value: '1.6.0'
- name: workingDirectory
  value: '$(System.DefaultWorkingDirectory)/terraform/environments/dev'

stages:
- stage: Validate
  displayName: 'Terraform Validate'
  jobs:
  - job: TerraformValidate
    displayName: 'Validate Terraform Configuration'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: AzureCLI@2
      displayName: 'Install Terraform'
      inputs:
        azureSubscription: 'azure-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Install Terraform
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform
          terraform version
    
    - task: AzureCLI@2
      displayName: 'Terraform Format Check'
      inputs:
        azureSubscription: 'azure-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        inlineScript: |
          terraform fmt -check -recursive
    
    - task: AzureCLI@2
      displayName: 'Terraform Init'
      inputs:
        azureSubscription: 'azure-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: $(workingDirectory)
        inlineScript: |
          terraform init \
            -backend-config="resource_group_name=$(terraformStateResourceGroup)" \
            -backend-config="storage_account_name=$(terraformStateStorageAccount)" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=dev.terraform.tfstate"
    
    - task: AzureCLI@2
      displayName: 'Terraform Validate'
      inputs:
        azureSubscription: 'azure-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: $(workingDirectory)
        inlineScript: |
          terraform validate

- stage: Plan
  displayName: 'Terraform Plan'
  dependsOn: Validate
  condition: succeeded()
  jobs:
  - job: TerraformPlan
    displayName: 'Plan Infrastructure Changes'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: AzureCLI@2
      displayName: 'Install Terraform'
      inputs:
        azureSubscription: 'azure-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Install Terraform
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform
          terraform version
    
    - task: AzureCLI@2
      displayName: 'Terraform Init'
      inputs:
        azureSubscription: 'azure-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: $(workingDirectory)
        inlineScript: |
          terraform init \
            -backend-config="resource_group_name=$(terraformStateResourceGroup)" \
            -backend-config="storage_account_name=$(terraformStateStorageAccount)" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=dev.terraform.tfstate"
    
    - task: AzureCLI@2
      displayName: 'Terraform Plan'
      inputs:
        azureSubscription: 'azure-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: $(workingDirectory)
        inlineScript: |
          terraform plan -var-file="terraform.tfvars" -out=tfplan
    
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Terraform Plan'
      inputs:
        targetPath: '$(workingDirectory)/tfplan'
        artifact: 'terraform-plan'

- stage: Apply
  displayName: 'Terraform Apply'
  dependsOn: Plan
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: TerraformApply
    displayName: 'Deploy Infrastructure'
    environment: 'dev-infrastructure'
    pool:
      vmImage: 'ubuntu-latest'
    
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Install Terraform'
            inputs:
              azureSubscription: 'azure-service-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Install Terraform
                wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
                echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
                sudo apt update && sudo apt install terraform
                terraform version
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Terraform Plan'
            inputs:
              artifact: 'terraform-plan'
              path: $(workingDirectory)
          
          - task: AzureCLI@2
            displayName: 'Terraform Init'
            inputs:
              azureSubscription: 'azure-service-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: $(workingDirectory)
              inlineScript: |
                terraform init \
                  -backend-config="resource_group_name=$(terraformStateResourceGroup)" \
                  -backend-config="storage_account_name=$(terraformStateStorageAccount)" \
                  -backend-config="container_name=tfstate" \
                  -backend-config="key=dev.terraform.tfstate"
          
          - task: AzureCLI@2
            displayName: 'Terraform Apply'
            inputs:
              azureSubscription: 'azure-service-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: $(workingDirectory)
              inlineScript: |
                terraform apply -auto-approve tfplan
          
          - task: AzureCLI@2
            displayName: 'Terraform Output'
            inputs:
              azureSubscription: 'azure-service-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: $(workingDirectory)
              inlineScript: |
                echo "=== Terraform Outputs ==="
                terraform output