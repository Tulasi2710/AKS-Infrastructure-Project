# Azure DevOps Pipeline for AKS Infrastructure Deployment
# This pipeline deploys Terraform infrastructure to Azure

trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - terraform/**
    - pipelines/azure-pipelines.yml

variables:
- group: terraform-backend
- name: terraformVersion
  value: '1.6.0'
- name: workingDirectory
  value: '$(System.DefaultWorkingDirectory)/terraform/environments/dev'
# Service connection for Azure authentication
- name: azureServiceConnection
  value: 'azure-service-connection1'

stages:
- stage: Validate
  displayName: 'Terraform Validate'
  jobs:
  - job: TerraformValidate
    displayName: 'Validate Terraform Configuration'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '$(terraformVersion)'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(workingDirectory)'
        backendServiceArm: '$(azureServiceConnection)'
        backendAzureRmResourceGroupName: '$(terraformStateResourceGroup)'
        backendAzureRmStorageAccountName: '$(terraformStateStorageAccount)'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'dev.terraform.tfstate'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(workingDirectory)'

- stage: Plan
  displayName: 'Terraform Plan'
  dependsOn: Validate
  condition: succeeded()
  jobs:
  - job: TerraformPlan
    displayName: 'Plan Infrastructure Changes'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '$(terraformVersion)'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(workingDirectory)'
        backendServiceArm: '$(azureServiceConnection)'
        backendAzureRmResourceGroupName: '$(terraformStateResourceGroup)'
        backendAzureRmStorageAccountName: '$(terraformStateStorageAccount)'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'dev.terraform.tfstate'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(workingDirectory)'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'
        commandOptions: '-var-file="terraform.tfvars" -out=tfplan -detailed-exitcode'
    
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Terraform Plan'
      inputs:
        targetPath: '$(workingDirectory)/tfplan'
        artifact: 'terraform-plan'

- stage: Apply
  displayName: 'Terraform Apply'
  dependsOn: Plan
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: TerraformApply
    displayName: 'Deploy Infrastructure'
    environment: 'dev-infrastructure'
    pool:
      vmImage: 'ubuntu-latest'
    
    strategy:
      runOnce:
        deploy:
          steps:
          - task: PowerShell@2
            displayName: 'üö® Pre-Deployment Approval Notice'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "üö® CRITICAL: About to deploy AKS Infrastructure!" -ForegroundColor Red
                Write-Host ""
                Write-Host "üìã Resources to be deployed:" -ForegroundColor Yellow
                Write-Host "   ‚Ä¢ Resource Group: aks-infra-dev-rg-*"
                Write-Host "   ‚Ä¢ Virtual Network: 10.0.0.0/16"
                Write-Host "   ‚Ä¢ AKS Cluster: 2 nodes (Standard_D2s_v6)"
                Write-Host "   ‚Ä¢ Network Security Groups"
                Write-Host ""
                Write-Host "üí∞ Estimated Cost: ~$150-200 USD/month" -ForegroundColor Cyan
                Write-Host "üîí Environment approval required" -ForegroundColor Green
                Write-Host ""
                Write-Host "‚è≥ Proceeding with approved deployment..." -ForegroundColor Green

          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '$(terraformVersion)'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Terraform Plan'
            inputs:
              artifact: 'terraform-plan'
              path: $(workingDirectory)
          
          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(workingDirectory)'
              backendServiceArm: '$(azureServiceConnection)'
              backendAzureRmResourceGroupName: '$(terraformStateResourceGroup)'
              backendAzureRmStorageAccountName: '$(terraformStateStorageAccount)'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'dev.terraform.tfstate'
          
          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(workingDirectory)'
              environmentServiceNameAzureRM: '$(azureServiceConnection)'
              commandOptions: '-auto-approve -var-file="terraform.tfvars"'
          
          - task: TerraformTaskV4@4
            displayName: 'Terraform Output'
            inputs:
              provider: 'azurerm'
              command: 'output'
              workingDirectory: '$(workingDirectory)'
              environmentServiceNameAzureRM: '$(azureServiceConnection)'
