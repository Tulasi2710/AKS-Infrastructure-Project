name: 'Trigger ArgoCD Sync'

on:
  push:
    branches: [ "main" ]
    paths:
      - 'k8s/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'k8s/**'
  workflow_dispatch:
    inputs:
      application_name:
        description: 'ArgoCD Application to Sync'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - ecommerce-microservices
        - ecommerce-database
        - ecommerce-monitoring
      aks_cluster_name:
        description: 'AKS Cluster Name'
        required: true
        default: 'aks-cluster-dev'
        type: string
      resource_group_name:
        description: 'Resource Group Name'
        required: true
        default: 'rg-aks-dev'
        type: string

permissions:
  id-token: write
  contents: read

env:
  KUBECTL_VERSION: 'v1.28.0'

jobs:
  validate-k8s:
    name: 'Validate Kubernetes Changes'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}

    - name: Validate K8s Manifests
      run: |
        echo "üîç Validating Kubernetes manifests for ArgoCD compatibility..."
        find k8s/ -name "*.yaml" -o -name "*.yml" | while read file; do
          echo "  ‚úì Validating $file"
          kubectl apply --dry-run=client -f "$file" || exit 1
        done
        echo "‚úÖ All manifests are valid for ArgoCD deployment"

    - name: Check ArgoCD Compatibility
      run: |
        echo "üìã Checking ArgoCD compatibility..."
        
        # Check for conflicting resources
        echo "Checking for namespace definitions:"
        find k8s/ -name "*.yaml" -exec grep -l "kind: Namespace" {} \; || echo "No namespace definitions found"
        
        echo ""
        echo "Checking for resource naming conflicts:"
        find k8s/ -name "*.yaml" -exec grep -H "name:" {} \; | head -10
        
        echo ""
        echo "‚úÖ Manifests are compatible with ArgoCD GitOps workflow"

  trigger-argocd-sync:
    name: 'Trigger ArgoCD Synchronization'
    runs-on: ubuntu-latest
    needs: validate-k8s
    if: github.ref == 'refs/heads/main'
    environment: argocd-sync
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}

    - name: Connect to AKS Cluster
      run: |
        CLUSTER_NAME="${{ github.event.inputs.aks_cluster_name || 'aks-cluster-dev' }}"
        RG_NAME="${{ github.event.inputs.resource_group_name || 'rg-aks-dev' }}"
        
        echo "üîó Connecting to AKS cluster: $CLUSTER_NAME in resource group: $RG_NAME"
        az aks get-credentials --resource-group "$RG_NAME" --name "$CLUSTER_NAME" --overwrite-existing
        
        echo "‚úÖ Connected to cluster"
        kubectl cluster-info

    - name: Check ArgoCD Status
      run: |
        echo "üìä Checking ArgoCD installation status..."
        
        if kubectl get namespace argocd 2>/dev/null; then
          echo "‚úÖ ArgoCD namespace found"
          
          # Check if ArgoCD is running
          if kubectl get pods -n argocd | grep -q "Running"; then
            echo "‚úÖ ArgoCD is running"
            
            # List applications
            echo ""
            echo "ArgoCD Applications:"
            kubectl get applications -n argocd || echo "No applications found"
          else
            echo "‚ö†Ô∏è ArgoCD pods are not in Running state"
            kubectl get pods -n argocd
            exit 1
          fi
        else
          echo "‚ùå ArgoCD is not installed. Please run the ArgoCD installation pipeline first."
          exit 1
        fi

    - name: Trigger Application Sync
      run: |
        APPLICATION="${{ github.event.inputs.application_name || 'all' }}"
        
        if [ "$APPLICATION" = "all" ]; then
          echo "üîÑ Triggering sync for all ArgoCD applications..."
          
          APPLICATIONS=("ecommerce-microservices" "ecommerce-database" "ecommerce-monitoring")
          
          for app in "${APPLICATIONS[@]}"; do
            echo "  Syncing application: $app"
            if kubectl get application "$app" -n argocd 2>/dev/null; then
              kubectl patch application "$app" -n argocd -p '{"operation":{"initiatedBy":{"username":"github-actions"},"sync":{"revision":"HEAD"}}}' --type merge || true
              echo "  ‚úÖ Sync triggered for $app"
            else
              echo "  ‚ö†Ô∏è Application $app not found"
            fi
          done
        else
          echo "üîÑ Triggering sync for application: $APPLICATION"
          
          if kubectl get application "$APPLICATION" -n argocd 2>/dev/null; then
            kubectl patch application "$APPLICATION" -n argocd -p '{"operation":{"initiatedBy":{"username":"github-actions"},"sync":{"revision":"HEAD"}}}' --type merge || true
            echo "‚úÖ Sync triggered for $APPLICATION"
          else
            echo "‚ùå Application $APPLICATION not found"
            exit 1
          fi
        fi

    - name: Monitor Sync Status
      run: |
        echo "üëÄ Monitoring ArgoCD sync status..."
        
        # Wait for sync to start and complete
        timeout=300
        while [ $timeout -gt 0 ]; do
          echo ""
          echo "Application Status ($(date)):"
          kubectl get applications -n argocd -o custom-columns="NAME:.metadata.name,SYNC:.status.sync.status,HEALTH:.status.health.status,REVISION:.status.sync.revision" || true
          
          # Check if any application is still syncing
          SYNCING=$(kubectl get applications -n argocd -o jsonpath='{.items[*].status.sync.status}' 2>/dev/null | grep -c "Syncing" || echo "0")
          
          if [ "$SYNCING" -eq 0 ]; then
            echo ""
            echo "‚úÖ All applications have completed synchronization"
            break
          fi
          
          echo "  Waiting for sync completion... ($timeout seconds remaining)"
          sleep 10
          timeout=$((timeout-10))
        done
        
        if [ $timeout -le 0 ]; then
          echo "‚ö†Ô∏è Sync monitoring timed out"
        fi

    - name: Final Status Report
      run: |
        echo ""
        echo "üìä Final ArgoCD Status Report:"
        echo "============================="
        
        # Detailed application status
        kubectl get applications -n argocd -o wide || echo "No applications found"
        
        echo ""
        echo "Application Health Details:"
        for app in ecommerce-microservices ecommerce-database ecommerce-monitoring; do
          if kubectl get application "$app" -n argocd 2>/dev/null; then
            echo ""
            echo "Application: $app"
            kubectl get application "$app" -n argocd -o jsonpath='  Sync Status: {.status.sync.status}{"\n"}  Health Status: {.status.health.status}{"\n"}  Revision: {.status.sync.revision}{"\n"}'
          fi
        done
        
        echo ""
        echo "üîó ArgoCD UI Access:"
        ARGOCD_IP=$(kubectl get svc argocd-server-loadbalancer -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "Pending")
        if [ "$ARGOCD_IP" != "Pending" ]; then
          echo "   https://$ARGOCD_IP"
        else
          echo "   LoadBalancer IP pending - check: kubectl get svc argocd-server-loadbalancer -n argocd"
        fi

    - name: GitOps Workflow Status
      run: |
        echo ""
        echo "üéâ GitOps Workflow Status:"
        echo "========================="
        echo ""
        echo "‚úÖ Kubernetes manifests validated"
        echo "‚úÖ ArgoCD synchronization triggered"
        echo "‚úÖ Applications deployment monitored"
        echo ""
        echo "üîÑ GitOps Process:"
        echo "   1. Code changes detected in k8s/ directory"
        echo "   2. Manifests validated for ArgoCD compatibility"
        echo "   3. ArgoCD applications synchronized with Git"
        echo "   4. Deployment status monitored and reported"
        echo ""
        echo "üìù GitOps Benefits Active:"
        echo "   ‚Ä¢ Declarative deployments"
        echo "   ‚Ä¢ Git as single source of truth"
        echo "   ‚Ä¢ Automated drift detection and correction"
        echo "   ‚Ä¢ Audit trail of all changes"
        echo "   ‚Ä¢ Rollback capabilities"
        echo ""
        echo "üöÄ Your GitOps workflow is operational!"