name: 'Complete AKS Infrastructure and Microservices'

on:
  push:
    branches: [ "main" ]
    paths:
      - 'terraform/**'
      - 'k8s/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'terraform/**'
      - 'k8s/**'
      - '.github/workflows/infrastructure.yml'
  workflow_dispatch:
    inputs:
      deploy_infrastructure:
        description: 'Deploy Terraform Infrastructure'
        required: false
        default: 'true'
        type: boolean
      deploy_microservices:
        description: 'Deploy Microservices to AKS'
        required: false
        default: 'true'
        type: boolean
      destroy_infrastructure:
        description: 'Destroy Infrastructure (DANGER)'
        required: false
        default: 'false'
        type: boolean

permissions:
  id-token: write
  contents: read
  pull-requests: write
  issues: write

env:
  TF_VERSION: '1.6.0'
  WORKING_DIR: './terraform/environments/dev'
  KUBECTL_VERSION: 'v1.28.0'

jobs:
  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_infrastructure != 'false'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Format Check
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
      run: terraform fmt -check

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
      run: terraform init

    - name: Terraform Validate
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
      run: terraform validate

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event.inputs.deploy_infrastructure != 'false' && github.event.inputs.destroy_infrastructure != 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
      run: terraform init

    - name: Terraform Plan
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
      run: |
        terraform plan -detailed-exitcode -out=tfplan
        terraform show -no-color tfplan > terraform-plan.txt

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan
        path: ${{ env.WORKING_DIR }}/tfplan

    - name: Comment PR with Plan
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const path = '${{ env.WORKING_DIR }}/terraform-plan.txt';
          
          if (fs.existsSync(path)) {
            const plan = fs.readFileSync(path, 'utf8');
            const output = `#### Terraform Plan ðŸ“–
            
            \`\`\`terraform
            ${plan.length > 60000 ? plan.substring(0, 60000) + '\n... (truncated)' : plan}
            \`\`\`
            
            **Pushed by:** @${{ github.actor }}
            **Action:** \`${{ github.event_name }}\`
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
          }

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && github.event.inputs.destroy_infrastructure != 'true'
    environment: production
    
    outputs:
      aks_cluster_name: ${{ steps.terraform_outputs.outputs.aks_cluster_name }}
      resource_group_name: ${{ steps.terraform_outputs.outputs.resource_group_name }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan
        path: ${{ env.WORKING_DIR }}

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
      run: terraform init

    - name: Terraform Apply
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
      run: terraform apply -auto-approve tfplan

    - name: Get Terraform Outputs
      id: terraform_outputs
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
      run: |
        echo "aks_cluster_name=$(terraform output -raw aks_cluster_name)" >> $GITHUB_OUTPUT
        echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT

  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event.inputs.destroy_infrastructure == 'true' && github.ref == 'refs/heads/main'
    environment: production-destroy
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
      run: terraform init

    - name: Terraform Destroy
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
      run: terraform destroy -auto-approve

  deploy-microservices:
    name: 'Deploy Microservices'
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref == 'refs/heads/main' && github.event.inputs.deploy_microservices != 'false' && github.event.inputs.destroy_infrastructure != 'true'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ needs.terraform-apply.outputs.resource_group_name }} --name ${{ needs.terraform-apply.outputs.aks_cluster_name }} --overwrite-existing

    - name: Verify cluster connectivity
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Deploy Namespaces
      run: |
        kubectl apply -f k8s/namespaces/ecommerce-namespace.yaml

    - name: Deploy Database
      run: |
        kubectl apply -f k8s/database/postgres-deployment.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/postgres -n ecommerce-database

    - name: Deploy Backend Services
      run: |
        kubectl apply -f k8s/backend/backend-services.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/user-service -n ecommerce
        kubectl wait --for=condition=available --timeout=300s deployment/product-service -n ecommerce

    - name: Deploy Frontend
      run: |
        kubectl apply -f k8s/frontend/frontend-deployment.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/frontend -n ecommerce

    - name: Deploy Ingress
      run: |
        kubectl apply -f k8s/ingress/ingress-config.yaml

    - name: Deploy Monitoring
      run: |
        kubectl apply -f k8s/monitoring/monitoring-stack.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/prometheus -n monitoring
        kubectl wait --for=condition=available --timeout=300s deployment/grafana -n monitoring

    - name: Get Deployment Status
      run: |
        echo "=== DEPLOYMENT SUMMARY ==="
        echo "E-commerce Pods:"
        kubectl get pods -n ecommerce
        echo ""
        echo "Database Pods:"
        kubectl get pods -n ecommerce-database
        echo ""
        echo "Monitoring Pods:"
        kubectl get pods -n monitoring
        echo ""
        echo "Services:"
        kubectl get svc --all-namespaces
        echo ""
        echo "Ingress:"
        kubectl get ingress -n ecommerce

    - name: Get Grafana LoadBalancer IP
      run: |
        echo "Waiting for Grafana LoadBalancer IP..."
        timeout=300
        while [ $timeout -gt 0 ]; do
          GRAFANA_IP=$(kubectl get svc grafana-service -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [ ! -z "$GRAFANA_IP" ]; then
            echo "Grafana is available at: http://$GRAFANA_IP:3000"
            echo "Username: admin"
            echo "Password: admin123"
            break
          fi
          echo "Waiting for LoadBalancer IP... ($timeout seconds remaining)"
          sleep 10
          timeout=$((timeout-10))
        done
        if [ -z "$GRAFANA_IP" ]; then
          echo "LoadBalancer IP not yet assigned. Check status later with: kubectl get svc grafana-service -n monitoring"
        fi