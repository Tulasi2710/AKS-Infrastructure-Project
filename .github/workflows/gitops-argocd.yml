name: 'GitOps with ArgoCD Setup'

on:
  push:
    branches: [ "main" ]
    paths:
      - 'argocd/**'
      - 'scripts/install-argocd.*'
      - '.github/workflows/gitops-argocd.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'argocd/**'
      - 'scripts/install-argocd.*'
      - '.github/workflows/gitops-argocd.yml'
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'AKS Cluster Name'
        required: true
        default: 'aks-cluster-dev'
        type: string
      resource_group_name:
        description: 'Resource Group Name'
        required: true
        default: 'rg-aks-dev'
        type: string
      action:
        description: 'Action to perform'
        required: false
        default: 'install'
        type: choice
        options:
        - install
        - uninstall
        - status

permissions:
  id-token: write
  contents: read

env:
  KUBECTL_VERSION: 'v1.28.0'

jobs:
  validate-argocd:
    name: 'Validate ArgoCD Manifests'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}

    - name: Validate ArgoCD YAML
      run: |
        echo "üîç Validating ArgoCD manifests..."
        find argocd/ -name "*.yaml" -o -name "*.yml" | while read file; do
          echo "  ‚úì Validating $file"
          kubectl apply --dry-run=client -f "$file" || exit 1
        done
        echo "‚úÖ All ArgoCD manifests are valid"

    - name: Check Application References
      run: |
        echo "üìã Checking ArgoCD application configurations..."
        echo "Repository URL in applications:"
        grep -r "repoURL:" argocd/ || echo "No repoURL found"
        echo ""
        echo "Target namespaces:"
        grep -r "namespace:" argocd/ || echo "No namespaces found"
        echo ""
        echo "Source paths:"
        grep -r "path:" argocd/ || echo "No paths found"

  setup-argocd:
    name: 'Setup ArgoCD on AKS'
    runs-on: ubuntu-latest
    needs: validate-argocd
    if: github.ref == 'refs/heads/main'
    environment: argocd-deployment
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}

    - name: Connect to AKS Cluster
      run: |
        CLUSTER_NAME="${{ github.event.inputs.aks_cluster_name || 'aks-cluster-dev' }}"
        RG_NAME="${{ github.event.inputs.resource_group_name || 'rg-aks-dev' }}"
        
        echo "üîó Connecting to AKS cluster: $CLUSTER_NAME in resource group: $RG_NAME"
        az aks get-credentials --resource-group "$RG_NAME" --name "$CLUSTER_NAME" --overwrite-existing
        
        echo "‚úÖ Connected to cluster"
        kubectl cluster-info
        kubectl get nodes

    - name: Check Current ArgoCD Status
      continue-on-error: true
      run: |
        echo "üìä Checking current ArgoCD status..."
        kubectl get namespace argocd 2>/dev/null || echo "ArgoCD namespace not found"
        kubectl get pods -n argocd 2>/dev/null || echo "No ArgoCD pods found"

    - name: Install ArgoCD (Linux)
      if: github.event.inputs.action != 'uninstall' && github.event.inputs.action != 'status'
      run: |
        echo "üöÄ Installing ArgoCD using installation script..."
        chmod +x scripts/install-argocd.sh
        ./scripts/install-argocd.sh

    - name: Verify ArgoCD Installation
      if: github.event.inputs.action != 'uninstall'
      run: |
        echo "üîç Verifying ArgoCD installation..."
        
        # Check ArgoCD pods
        echo "ArgoCD Pods:"
        kubectl get pods -n argocd
        
        # Check ArgoCD applications
        echo ""
        echo "ArgoCD Applications:"
        kubectl get applications -n argocd || echo "No applications found yet"
        
        # Check services
        echo ""
        echo "ArgoCD Services:"
        kubectl get svc -n argocd

    - name: Get ArgoCD Access Information
      if: github.event.inputs.action != 'uninstall'
      run: |
        echo "üåê ArgoCD Access Information:"
        echo "============================="
        
        # Get LoadBalancer IP
        ARGOCD_IP=$(kubectl get svc argocd-server-loadbalancer -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
        
        # Get admin password
        ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" 2>/dev/null | base64 -d || echo "Password not available")
        
        echo ""
        if [ ! -z "$ARGOCD_IP" ]; then
          echo "üéØ ArgoCD UI: https://$ARGOCD_IP"
          echo "Username: admin"
          echo "Password: $ARGOCD_PASSWORD"
        else
          echo "LoadBalancer IP: Pending"
          echo "Check later with: kubectl get svc argocd-server-loadbalancer -n argocd"
          echo "Username: admin"
          echo "Password: $ARGOCD_PASSWORD"
        fi
        
        echo ""
        echo "üìã GitOps Configuration:"
        echo "Repository: https://github.com/${{ github.repository }}"
        echo "Monitoring Path: k8s/"
        echo "Auto-sync: Enabled"

    - name: Uninstall ArgoCD
      if: github.event.inputs.action == 'uninstall'
      run: |
        echo "‚ö†Ô∏è Uninstalling ArgoCD..."
        
        # Delete applications first
        kubectl delete applications --all -n argocd --ignore-not-found=true
        
        # Delete ArgoCD installation
        kubectl delete -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml --ignore-not-found=true
        
        # Delete namespace
        kubectl delete namespace argocd --ignore-not-found=true
        
        echo "‚úÖ ArgoCD uninstalled"

    - name: ArgoCD Status Check
      run: |
        echo ""
        echo "üìä Final ArgoCD Status:"
        echo "======================="
        
        if kubectl get namespace argocd 2>/dev/null; then
          echo "‚úÖ ArgoCD namespace exists"
          echo ""
          echo "Pod Status:"
          kubectl get pods -n argocd
          echo ""
          echo "Application Status:"
          kubectl get applications -n argocd 2>/dev/null || echo "No applications found"
        else
          echo "‚ùå ArgoCD is not installed"
        fi

    - name: GitOps Workflow Summary
      if: github.event.inputs.action != 'uninstall'
      run: |
        echo ""
        echo "üéâ GitOps Workflow Summary:"
        echo "=========================="
        echo ""
        echo "‚úÖ ArgoCD installed and configured"
        echo "‚úÖ Applications created for:"
        echo "   - ecommerce-microservices (k8s/)"
        echo "   - ecommerce-database (k8s/database/)"
        echo "   - ecommerce-monitoring (k8s/monitoring/)"
        echo ""
        echo "üîÑ GitOps Workflow Active:"
        echo "   - Repository: https://github.com/${{ github.repository }}"
        echo "   - Auto-sync: Enabled"
        echo "   - Self-heal: Enabled"
        echo "   - Prune: Enabled"
        echo ""
        echo "üìù Next Steps:"
        echo "   1. Access ArgoCD UI to monitor deployments"
        echo "   2. Make changes to k8s/ manifests"
        echo "   3. Push changes to trigger GitOps sync"
        echo "   4. Monitor synchronization in ArgoCD dashboard"
        echo ""
        echo "üöÄ Your GitOps workflow is ready!"